# Copyright (C) 2004 Sridhar .R <sridhar@users.berlios.de>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

"""Rankings/Standings generator

Generates HTML files, .. Each of the below Generators
must define a 'generate' method"""

# FIMXE: Generating fullstats for most of the Generators are not
#        going to be useful, .. but will that anyway generate more
#        load on the server?
#
#        But since the fullstats is going to be re-used for every 
#        Generators, we for most time don't need to worry, unless
#        the contest doesn't makes use of RankingsGen and like.

import os.path


html_tmpl = """<!-- Generated by codehack -->
<html>
<title>%(contest)s - %(stat)s</title>
<body>
%(content)s
</body>
</html>
"""

class RankingsGen(object):
    
    """Generate rankings list
    
    Columns: teamname, pr. solved, score
    """

    filename = 'rankings.html'
    name = 'Rankings'

    def __init__(self, max_rank,
                 problems, languages, results, acc_result):
        """
        @param max_rank: Last rank to be denerated
        @param problems: List of problems (@see profile/)
        @param languages: Dict of languages (@see profile/)
        @param results:  List of Results (@see profile/)
        @param acc_result: Index of acc result
        """
        self.max_rank = max_rank
        self.problems = problems
        self.languages = languages
        self.results = results
        self.acc_result = acc_result

    def generate(self, directory, contest_name, 
                score_dict, submissions_dict):
        """
        @param directory: directory to save in
        @param score_dict: userid=>score_obj (DO NOT MODIFY)
        @param submissions_dict: dictionary of userid=>info where info is 
                          list (for each problem) of list 
                          (for each submissions) i.e. 
                          [problem, language ts, result], score
        """
        content = ''
        # First sort acc. to score
        score_tuple = [(score, userid) \
                        for userid, score in score_dict.items()]
        score_tuple.sort()       # sort ..
        score_tuple.reverse()    # .. in ascending order!
        
        print '**st', score_tuple
        for score, userid in score_tuple:
            pr_status = []
            print '\t**', userid, score
            for prinfo in submissions_dict[userid]:
                print '\t\t**', prinfo
                if prinfo and len(prinfo) > 0:
                    if prinfo[-1][3] == self.acc_result:
                        pr_status.append(1)  # ACC
                    else:
                        pr_status.append(-1) # Failed attempt
                else:
                    pr_status.append(0)      # Not submitted
            content = content + \
                "<b>%s</b> - %s - <i>%s</i><br />" % \
                (userid, pr_status, score)
        f = file(os.path.join(directory, self.filename), 'w')
        try:
            c = html_tmpl % {
                'contest': contest_name,
                'stat': self.name,
                'content': content
            }
            f.write(c)
        finally:
            f.close()

        
